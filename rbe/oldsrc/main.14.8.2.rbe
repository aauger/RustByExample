struct IntContainer(i32, i32);
struct CharContainer(char, char);

// A trait which checks if 2 items are stored inside of container.
// Also retrieves first or last value.
trait Contains {
    // Define generic types here which methods will be able to utilize.
    type A;
    type B;

    fn contains(&self, _: &Self::A, _: &Self::B) -> bool;
    fn first(&self) -> Self::A;
    fn last(&self) -> Self::B;
}

impl Contains for IntContainer {
    // Specify what types `A` and `B` are. If the `input` type
    // is `Container(i32, i32)`, the `output` types are determined
    // as `i32` and `i32`.
    type A = i32;
    type B = i32;

    // `&Self::A` and `&Self::B` are also valid here.
    fn contains(&self, number_1: &i32, number_2: &i32) -> bool {
        (&self.0 == number_1) && (&self.1 == number_2)
    }
    // Grab the first number.
    fn first(&self) -> Self::A { self.0 }

    // Grab the last number.
    fn last(&self) -> Self::B { self.1 }
}

impl Contains for CharContainer {
    type A = char;
    type B = char;

    fn contains(&self, fv: &Self::A, sv: &Self::B) -> bool {
        self.0 == *fv && self.1 == *sv
    }

    fn first(&self) -> Self::A {
        self.0
    }

    fn last(&self) -> Self::B {
        self.1
    }
}

fn main() {
    let number_1 = 3;
    let number_2 = 10;

    let container = IntContainer(number_1, number_2);

    println!("Does container contain {} and {}: {}",
        &number_1, &number_2,
        container.contains(&number_1, &number_2));
    println!("First number: {}", container.first());
    println!("Last number: {}", container.last());
    println!("The difference is: {}", container.last() - container.first());

    let char_1 = 'Z';
    let char_2 = 'X';

    let char_container = CharContainer(char_1, char_2);

    println!("{}, {}, {}", char_container.contains(&'Z', &'X'), char_container.first(), char_container.last());

}

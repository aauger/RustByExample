fn main() {
    /* 
        Using loop & match, then destructuring the option.
    */
    {        
        // Make `optional` of type `Option<i32>`
        let mut optional = Some(0);
    
        // Repeatedly try this test.
        loop {
            match optional {
                // If `optional` destructures, evaluate the block.
                Some(i) => {
                    if i > 9 {
                        println!("Greater than 9, quit!");
                        optional = None;
                    } else {
                        println!("`i` is `{:?}`. Try again.", i);
                        optional = Some(i + 1);
                    }
                    // ^ Requires 3 indentations!
                }
                // Quit the loop when the destructure fails:
                _ => {
                    break;
                } // ^ Why should this be required? There must be a better way!
            }
        }
    }

    /* 
        Using 'while let' which works as `if let` in that you needn't account for every possible
        pattern. Simply address the cases you need, and then use the deconstructed values.
    */
    {
        // Make `optional` of type `Option<i32>`
        let mut optional = Some(0);
    
        // This reads: "while `let` destructures `optional` into
        // `Some(i)`, evaluate the block (`{}`). Else `break`.
        while let Some(i) = optional {
            if i > 9 {
                println!("Greater than 9, quit!");
                optional = None;
            } else {
                println!("`i` is `{:?}`. Try again.", i);
                optional = Some(i + 1);
            }
            // ^ Less rightward drift and doesn't require
            // explicitly handling the failing case.
        }
        // ^ `if let` had additional optional `else`/`else if`
        // clauses. `while let` does not have these.
    }

}

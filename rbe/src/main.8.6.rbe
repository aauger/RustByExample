enum TwoDThreeD {
    TwoD { x: i32, y: i32 },
    ThreeD { x: i32, y: i32, z: i32 },
}

struct Value {
    i: i32
}

fn main() {
    /*
        Traditional Match Structure
    */

    // Make `optional` of type `Option<i32>`
    let optional = Some(7);

    match optional {
        Some(i) => {
            println!("This is a really long string and `{:?}`", i);
            // ^ Needed 2 indentations just so we could destructure
            // `i` from the option.
        }
        _ => {} // ^ Required because `match` is exhaustive. Doesn't it seem
                // like wasted space?
    };

    /*
        If Let Cleans things up
    */

    // All have type `Option<i32>`
    let number = Some(7);
    let letter: Option<i32> = None;
    let emoticon: Option<i32> = None;

    // The `if let` construct reads: "if `let` destructures `number` into
    // `Some(i)`, evaluate the block (`{}`).
    if let Some(i) = number {
        println!("Matched {:?}!", i);
    }

    // If you need to specify a failure, use an else:
    if let Some(i) = letter {
        println!("Matched {:?}!", i);
    } else {
        // Destructure failed. Change to the failure case.
        println!("Didn't match a number. Let's go with a letter!");
    }

    // Provide an altered failing condition.
    let i_like_letters = false;

    if let Some(i) = emoticon {
        println!("Matched {:?}!", i);
    // Destructure failed. Evaluate an `else if` condition to see if the
    // alternate failure branch should be taken:
    } else if i_like_letters {
        println!("Didn't match a number. Let's go with a letter!");
    } else {
        // The condition evaluated false. This branch is the default:
        println!("I don't like letters. Let's go with an emoticon :)!");
    }

    /* 
        If Let pattern not limited to simple enum types. It can destructure any struct!
    */

    let point3d = TwoDThreeD::ThreeD {
        x: 55,
        y: 39,
        z: 100,
    };

    if let TwoDThreeD::ThreeD { x, y, z } = point3d {
        println!("x: {x}, y: {y}, z: {z}");
    }

    /* 
        Notice how `if let` is merely an addition to standard structure deconstruction --
        same patterns, but only binds the necessary conditions -- irrefutable patterns vs refutable patterns
    */

    //e.g. the following will not work
    // ERR: REFUTABLE PATTERN
    //let TwoDThreeD::ThreeD { x , y, z } = point3d;

    //But this will!
    let value = Value { i: 600 };

    let Value { i: ivalue } = value;
    println!("pattern: {ivalue}");
    
}

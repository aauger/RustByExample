fn main() {
    let value: i32 = 69;

    // Increment via closures and functions.
    fn function(i: i32) -> i32 { i + 1 }
    
    // local functions CANNOT see values in their enclosing scope
    //fn other_function(i: i32) -> i32 { i + value }
    // ^ THIS WILL NOT COMPILE
    
    // Closures are anonymous, here we are binding them to references
    // Annotation is identical to function annotation but is optional
    // as are the `{}` wrapping the body. These nameless functions
    // are assigned to appropriately named variables.
    let closure_annotated = |i: i32| -> i32 { i + 1 };
    let closure_inferred  = |i     |          i + 1  ;


    //closures can capture their enclosing scope
    let closure_capturing = |i: i32| value + i;

    let i = 1;
    // Call the function and closures.
    println!("function: {}", function(i));
    println!("closure_annotated: {}", closure_annotated(i));
    println!("closure_inferred: {}", closure_inferred(i));
    println!("closure_capturing: {}", closure_capturing(i));

    // A closure taking no arguments which returns an `i32`.
    // The return type is inferred.
    let one = || 1;
    println!("closure returning one: {}", one());

}